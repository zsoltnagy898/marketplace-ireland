"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.withOptions = exports.setOptions = void 0;

require("core-js/modules/es6.array.for-each");

require("core-js/modules/es6.array.filter");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es6.date.to-string");

var _utilDeprecate = _interopRequireDefault(require("util-deprecate"));

var _addons = _interopRequireWildcard(require("@storybook/addons"));

var _shared = require("../shared");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// init function will be executed once when the storybook loads for the
// first time. This is a good place to add global listeners on channel.
function init() {// NOTE nothing to do here
}

function regExpStringify(exp) {
  if (typeof exp === 'string') return exp;
  if (Object.prototype.toString.call(exp) === '[object RegExp]') return exp.source;
  return null;
}

function hasOwnProp(object, propName) {
  return Object.prototype.hasOwnProperty.call(object, propName);
}

function withRegexProp(object, propName) {
  return hasOwnProp(object, propName) ? _defineProperty({}, propName, regExpStringify(object[propName])) : {};
}

function emitOptions(options) {
  var channel = _addons.default.getChannel();

  if (!channel) {
    throw new Error('Failed to find addon channel. This may be due to https://github.com/storybooks/storybook/issues/1192.');
  } // since 'undefined' and 'null' are the valid values we don't want to
  // override the hierarchySeparator or hierarchyRootSeparator if the prop is missing


  channel.emit(_shared.EVENT_ID, {
    options: _objectSpread({}, options, withRegexProp(options, 'hierarchySeparator'), withRegexProp(options, 'hierarchyRootSeparator'))
  });
} // setOptions function will send Storybook UI options when the channel is
// ready. If called before, options will be cached until it can be sent.


var globalOptions = {};
var setOptions = (0, _utilDeprecate.default)(function (options) {
  globalOptions = options;
  emitOptions(options);
}, '`setOptions(options)` is deprecated. Please use the `withOptions(options)` decorator globally.');
exports.setOptions = setOptions;
var withOptions = (0, _addons.makeDecorator)({
  name: 'withOptions',
  parameterName: 'options',
  skipIfNoParametersOrOptions: false,
  wrapper: function wrapper(getStory, context, _ref2) {
    var inputOptions = _ref2.options,
        parameters = _ref2.parameters;
    emitOptions(_objectSpread({}, globalOptions, inputOptions, parameters));
    return getStory(context);
  }
});
exports.withOptions = withOptions;