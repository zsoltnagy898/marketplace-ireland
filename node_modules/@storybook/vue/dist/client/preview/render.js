"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = render;

require("core-js/modules/es6.object.define-properties");

require("core-js/modules/es6.object.freeze");

require("core-js/modules/es6.array.for-each");

require("core-js/modules/es6.array.filter");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.array.is-array");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es7.object.entries");

require("core-js/modules/es6.array.map");

require("core-js/modules/es6.array.reduce");

var _commonTags = require("common-tags");

var _vue = _interopRequireDefault(require("vue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n        Did you forget to return the Vue component from the story?\n        Use \"() => ({ template: '<my-comp></my-comp>' })\" or \"() => ({ components: MyComp, template: '<my-comp></my-comp>' })\" when defining the story.\n      "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var root = null;

function getComponentProxy(component) {
  return Object.entries(component.props || {}).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        name = _ref2[0],
        def = _ref2[1];

    return _defineProperty({}, name, def.default);
  }).reduce(function (wrap, prop) {
    return _objectSpread({}, wrap, prop);
  }, {});
}

function renderRoot(component, proxy) {
  root = new _vue.default({
    el: '#root',
    beforeCreate: function beforeCreate() {
      this.proxy = proxy;
    },
    render: function render(h) {
      var props = this.proxy;
      return h('div', {
        attrs: {
          id: 'root'
        }
      }, [h(component, {
        props: props
      })]);
    }
  });
}

function render(_ref4) {
  var story = _ref4.story,
      selectedKind = _ref4.selectedKind,
      selectedStory = _ref4.selectedStory,
      showMain = _ref4.showMain,
      showError = _ref4.showError,
      showException = _ref4.showException,
      forceRender = _ref4.forceRender;
  _vue.default.config.errorHandler = showException;
  var component = story();

  if (!component) {
    showError({
      title: "Expecting a Vue component from the story: \"".concat(selectedStory, "\" of \"").concat(selectedKind, "\"."),
      description: (0, _commonTags.stripIndents)(_templateObject())
    });
    return;
  }

  showMain();
  var proxy = getComponentProxy(component); // at component creation || refresh by HMR

  if (!root || !forceRender) {
    if (root) root.$destroy();
    renderRoot(component, proxy);
  } else {
    root.proxy = proxy;
    root.$forceUpdate();
  }
}