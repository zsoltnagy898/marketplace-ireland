{"code":"import * as tslib_1 from \"tslib\";\r\nimport dedent from 'dedent';\r\nimport hljs from 'highlight.js';\r\nimport marked from 'marked';\r\nimport { defaultOptions } from '../options';\r\nimport { RuntimeComponent } from '../types/VueRuntime';\r\nimport getPropsInfoList from '../getPropsInfoList';\r\nimport parseStoryComponent from '../parseStoryComponent';\r\nimport getJSXFromRenderFn from '../utils/getJSXFromRenderFn';\r\nimport InfoView from '../components/InfoView.vue';\r\nimport lookupComponent from '../lookupComponent';\r\nimport getDuplicatedPropsDesc from '../getDuplicatedPropsDesc';\r\nvar renderer = new marked.Renderer();\r\nrenderer.code = function (code, lang) {\r\n    return \"<pre><code class=\\\"hljs\\\">\" + hljs.highlightAuto(code, lang ? [lang] : undefined).value + \"</code></pre>\";\r\n};\r\nmarked.setOptions({ renderer: renderer });\r\nfunction withInfo(options) {\r\n    return function (storyFn) { return function (context) {\r\n        if (context === void 0) { context = { kind: '', story: '' }; }\r\n        var opts = tslib_1.__assign({}, defaultOptions, (typeof options === 'string' ? { summary: options } : options));\r\n        var story = storyFn();\r\n        if (!story.template && story.render) {\r\n            console.warn('This plugin does not support showing story source when using a render method.');\r\n        }\r\n        var propTablesComponents = opts.propTables\r\n            ? opts.propTables.map(function (c) {\r\n                return typeof c === 'string'\r\n                    ? lookupComponent(c, story.components)\r\n                    : RuntimeComponent.toInfo(c);\r\n            })\r\n            : parseStoryComponent(story);\r\n        var propTablesExcludeComponents = opts.propTablesExclude\r\n            ? opts.propTablesExclude\r\n                .map(function (c) {\r\n                return typeof c === 'string'\r\n                    ? lookupComponent(c, story.components)\r\n                    : RuntimeComponent.toInfo(c);\r\n            })\r\n                .map(function (c) { return c && c.name; })\r\n            : [];\r\n        propTablesComponents = propTablesComponents.filter(function (c) { return propTablesExcludeComponents.indexOf(c.name) === -1; });\r\n        propTablesComponents.forEach(function (c, i) {\r\n            if (!c) {\r\n                console.error(\"Failed to lookup component at propTables[\" + i + \"].\");\r\n                return;\r\n            }\r\n            if (!c.name) {\r\n                console.warn(\"A component specified in propTables[\" + i + \"] has no \\\"runtime name\\\". Please consider using string literal.\");\r\n            }\r\n        });\r\n        var duplicatedPropsDesc = getDuplicatedPropsDesc(story, propTablesComponents);\r\n        if (duplicatedPropsDesc) {\r\n            console.warn(\"'\" + duplicatedPropsDesc + \"' property is used as duplicates. All '\" + duplicatedPropsDesc + \"' propsDescription may appear identical in all components.\");\r\n        }\r\n        var componentDetails = propTablesComponents\r\n            .map(function (c, i) {\r\n            return !c || c.name\r\n                ? c\r\n                : tslib_1.__assign({}, c, { name: \"<anonymous>propTables[\" + i + \"]\" });\r\n        })\r\n            .filter(function (c) { return c !== null; })\r\n            .map(function (c) { return ({\r\n            info: c,\r\n            propsList: getPropsInfoList(c.component, story)\r\n        }); });\r\n        return {\r\n            render: function (h) {\r\n                return h(InfoView, {\r\n                    props: {\r\n                        storyKind: context.kind,\r\n                        storyTitle: context.story,\r\n                        summary: marked(dedent(opts.summary)),\r\n                        template: dedent(story.template || getJSXFromRenderFn(story.render)),\r\n                        lang: story.template ? 'html' : 'jsx',\r\n                        componentDetails: componentDetails,\r\n                        showHeader: opts.header,\r\n                        showSource: opts.source,\r\n                        userStyle: opts.styles\r\n                    },\r\n                    scopedSlots: {\r\n                        default: function () { return [h(story)]; }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }; };\r\n}\r\nexport default withInfo;\r\n","dts":{"name":"/home/pockawoooh/development/github.com/pocka/storybook-addon-vue-info/withInfo/index.d.ts","text":"import Vue, { ComponentOptions } from 'vue';\r\nimport { InfoAddonOptions } from '../options';\r\nimport { RuntimeComponentOptions } from '../types/VueRuntime';\r\nexport declare type StoryFactory = () => RuntimeComponentOptions;\r\nexport declare type WithInfo = (story: StoryFactory) => (context?: {\r\n    kind: string;\r\n    story: string;\r\n}) => ComponentOptions<Vue>;\r\ndeclare function withInfo(options: Partial<InfoAddonOptions>): WithInfo;\r\ndeclare function withInfo(summary: string): WithInfo;\r\nexport default withInfo;\r\n"}}
